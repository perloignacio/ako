
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 29/4/2022 - 06:52 p.Â m.
// This is a partial class file. The other one is ContactoHistorialAciconesGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using crmRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace crmRules.Gateways
{

    public partial class ContactoHistorialAciconesGateway : BaseGateway<ContactoHistorialAciconesObject, ContactoHistorialAciconesObjectList>, IGenericGateway
    {

        #region "Singleton"

        static ContactoHistorialAciconesGateway _instance;

        private ContactoHistorialAciconesGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static ContactoHistorialAciconesGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ContactoHistorialAciconesGateway();
                else {
                    ContactoHistorialAciconesGateway inst = HttpContext.Current.Items["crmRules.ContactoHistorialAciconesGatewaySingleton"] as ContactoHistorialAciconesGateway;
                    if (inst == null) {
                        inst = new ContactoHistorialAciconesGateway();
                        HttpContext.Current.Items.Add("crmRules.ContactoHistorialAciconesGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "ContactoHistorialAcicones"; }
        }

        protected override string RuleName
        {
            get {return typeof(ContactoHistorialAciconesGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ContactoHistorialAciconesObject entity)
        {
            
            IMappeableContactoHistorialAciconesObject ContactoHistorialAcicones = (IMappeableContactoHistorialAciconesObject)entity;
            ContactoHistorialAcicones.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
reader.GetInt32(3),
reader.GetInt32(4),
reader.GetDateTime(5),
reader.GetBoolean(6));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(ContactoHistorialAciconesObject entity)
        {

            IMappeableContactoHistorialAciconesObject ContactoHistorialAcicones = (IMappeableContactoHistorialAciconesObject)entity;
            return ContactoHistorialAcicones.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(ContactoHistorialAciconesObject entity)
        {

            IMappeableContactoHistorialAciconesObject ContactoHistorialAcicones = (IMappeableContactoHistorialAciconesObject)entity;
            return ContactoHistorialAcicones.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(ContactoHistorialAciconesObject entity)
        {

            IMappeableContactoHistorialAciconesObject ContactoHistorialAcicones = (IMappeableContactoHistorialAciconesObject)entity;
            return ContactoHistorialAcicones.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ContactoHistorialAciconesObject row, object[] parameters)
        {
            ((IMappeableContactoHistorialAciconesObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        /// <summary>
        /// Get a ContactoHistorialAciconesObject by execute a SQL Query Text
        /// </summary>
        public ContactoHistorialAciconesObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by execute a SQL Query Text
        /// </summary>
        public ContactoHistorialAciconesObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a ContactoHistorialAciconesObject by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObject GetOne(System.Int32 IdHistorialAcciones)
        {
            return base.GetOne(new ContactoHistorialAciconesObject(IdHistorialAcciones));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactos(DbTransaction transaction,System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactosTipoAcciones(DbTransaction transaction,System.Int32 IdTipoAccion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", IdTipoAccion);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactosTipoAcciones(DbTransaction transaction, IUniqueIdentifiable ContactosTipoAcciones)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", ContactosTipoAcciones.Identifier());
        }

    

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactoUsuarios(DbTransaction transaction,System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    

        

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactos(System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactos(IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactosTipoAcciones(System.Int32 IdTipoAccion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", IdTipoAccion);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactosTipoAcciones(IUniqueIdentifiable ContactosTipoAcciones)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", ContactosTipoAcciones.Identifier());
        }

    

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactoUsuarios(System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoHistorialAciconesObjectList GetByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    

        /// <summary>
        /// Delete ContactoHistorialAcicones
        /// </summary>
        public void Delete(System.Int32 IdHistorialAcciones)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_Delete", IdHistorialAcciones);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdHistorialAcciones)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_Delete", IdHistorialAcciones);
        }

            

        

        /// <summary>
        /// Delete ContactoHistorialAcicones by Contactos
        /// </summary>
        public void DeleteByContactos(System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactos", IdContacto);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by Contactos
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactos", IdContacto);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by Contactos
        /// </summary>
        public void DeleteByContactos(IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactos", Contactos.Identifier());
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by Contactos
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactos", Contactos.Identifier());
        }


    

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactosTipoAcciones
        /// </summary>
        public void DeleteByContactosTipoAcciones(System.Int32 IdTipoAccion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactosTipoAcciones", IdTipoAccion);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactosTipoAcciones
        /// </summary>
        public void DeleteByContactosTipoAcciones(DbTransaction transaction, System.Int32 IdTipoAccion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactosTipoAcciones", IdTipoAccion);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactosTipoAcciones
        /// </summary>
        public void DeleteByContactosTipoAcciones(IUniqueIdentifiable ContactosTipoAcciones)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactosTipoAcciones", ContactosTipoAcciones.Identifier());
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactosTipoAcciones
        /// </summary>
        public void DeleteByContactosTipoAcciones(DbTransaction transaction, IUniqueIdentifiable ContactosTipoAcciones)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactosTipoAcciones", ContactosTipoAcciones.Identifier());
        }


    

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(DbTransaction transaction, System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactoUsuarios", ContactoUsuarios.Identifier());
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactoUsuarios", ContactoUsuarios.Identifier());
        }


    


        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








