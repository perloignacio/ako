
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 29/4/2022 - 06:52 p.Â m.
// This is a partial class file. The other one is ContactosHistorialAsignacionesGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using crmRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace crmRules.Gateways
{

    public partial class ContactosHistorialAsignacionesGateway : BaseGateway<ContactosHistorialAsignacionesObject, ContactosHistorialAsignacionesObjectList>, IGenericGateway
    {

        #region "Singleton"

        static ContactosHistorialAsignacionesGateway _instance;

        private ContactosHistorialAsignacionesGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static ContactosHistorialAsignacionesGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ContactosHistorialAsignacionesGateway();
                else {
                    ContactosHistorialAsignacionesGateway inst = HttpContext.Current.Items["crmRules.ContactosHistorialAsignacionesGatewaySingleton"] as ContactosHistorialAsignacionesGateway;
                    if (inst == null) {
                        inst = new ContactosHistorialAsignacionesGateway();
                        HttpContext.Current.Items.Add("crmRules.ContactosHistorialAsignacionesGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "ContactosHistorialAsignaciones"; }
        }

        protected override string RuleName
        {
            get {return typeof(ContactosHistorialAsignacionesGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ContactosHistorialAsignacionesObject entity)
        {
            
            IMappeableContactosHistorialAsignacionesObject ContactosHistorialAsignaciones = (IMappeableContactosHistorialAsignacionesObject)entity;
            ContactosHistorialAsignaciones.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetDateTime(3));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(ContactosHistorialAsignacionesObject entity)
        {

            IMappeableContactosHistorialAsignacionesObject ContactosHistorialAsignaciones = (IMappeableContactosHistorialAsignacionesObject)entity;
            return ContactosHistorialAsignaciones.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(ContactosHistorialAsignacionesObject entity)
        {

            IMappeableContactosHistorialAsignacionesObject ContactosHistorialAsignaciones = (IMappeableContactosHistorialAsignacionesObject)entity;
            return ContactosHistorialAsignaciones.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(ContactosHistorialAsignacionesObject entity)
        {

            IMappeableContactosHistorialAsignacionesObject ContactosHistorialAsignaciones = (IMappeableContactosHistorialAsignacionesObject)entity;
            return ContactosHistorialAsignaciones.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ContactosHistorialAsignacionesObject row, object[] parameters)
        {
            ((IMappeableContactosHistorialAsignacionesObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        /// <summary>
        /// Get a ContactosHistorialAsignacionesObject by execute a SQL Query Text
        /// </summary>
        public ContactosHistorialAsignacionesObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ContactosHistorialAsignacionesObjectList by execute a SQL Query Text
        /// </summary>
        public ContactosHistorialAsignacionesObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a ContactosHistorialAsignacionesObject by calling a Stored Procedure
        /// </summary>
        public ContactosHistorialAsignacionesObject GetOne(System.Int32 IdHistorialAsignacionesContacto)
        {
            return base.GetOne(new ContactosHistorialAsignacionesObject(IdHistorialAsignacionesContacto));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a ContactosHistorialAsignacionesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosHistorialAsignacionesObjectList GetByContactos(DbTransaction transaction,System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosHistorialAsignaciones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// Get a ContactosHistorialAsignacionesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosHistorialAsignacionesObjectList GetByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosHistorialAsignaciones_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// Get a ContactosHistorialAsignacionesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosHistorialAsignacionesObjectList GetByContactoUsuarios(DbTransaction transaction,System.Int32 IdUsuarioContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosHistorialAsignaciones_GetByContactoUsuarios", IdUsuarioContacto);
        }

        /// <summary>
        /// Get a ContactosHistorialAsignacionesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosHistorialAsignacionesObjectList GetByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosHistorialAsignaciones_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    

        

        /// <summary>
        /// Get a ContactosHistorialAsignacionesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosHistorialAsignacionesObjectList GetByContactos(System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactosHistorialAsignaciones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// Get a ContactosHistorialAsignacionesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosHistorialAsignacionesObjectList GetByContactos(IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactosHistorialAsignaciones_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// Get a ContactosHistorialAsignacionesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosHistorialAsignacionesObjectList GetByContactoUsuarios(System.Int32 IdUsuarioContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactosHistorialAsignaciones_GetByContactoUsuarios", IdUsuarioContacto);
        }

        /// <summary>
        /// Get a ContactosHistorialAsignacionesObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosHistorialAsignacionesObjectList GetByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactosHistorialAsignaciones_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    

        /// <summary>
        /// Delete ContactosHistorialAsignaciones
        /// </summary>
        public void Delete(System.Int32 IdHistorialAsignacionesContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactosHistorialAsignaciones_Delete", IdHistorialAsignacionesContacto);
        }

        /// <summary>
        /// Delete ContactosHistorialAsignaciones
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdHistorialAsignacionesContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosHistorialAsignaciones_Delete", IdHistorialAsignacionesContacto);
        }

            

        

        /// <summary>
        /// Delete ContactosHistorialAsignaciones by Contactos
        /// </summary>
        public void DeleteByContactos(System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactosHistorialAsignaciones_DeleteByContactos", IdContacto);
        }

        /// <summary>
        /// Delete ContactosHistorialAsignaciones by Contactos
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosHistorialAsignaciones_DeleteByContactos", IdContacto);
        }

        /// <summary>
        /// Delete ContactosHistorialAsignaciones by Contactos
        /// </summary>
        public void DeleteByContactos(IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactosHistorialAsignaciones_DeleteByContactos", Contactos.Identifier());
        }

        /// <summary>
        /// Delete ContactosHistorialAsignaciones by Contactos
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosHistorialAsignaciones_DeleteByContactos", Contactos.Identifier());
        }


    

        /// <summary>
        /// Delete ContactosHistorialAsignaciones by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(System.Int32 IdUsuarioContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactosHistorialAsignaciones_DeleteByContactoUsuarios", IdUsuarioContacto);
        }

        /// <summary>
        /// Delete ContactosHistorialAsignaciones by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(DbTransaction transaction, System.Int32 IdUsuarioContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosHistorialAsignaciones_DeleteByContactoUsuarios", IdUsuarioContacto);
        }

        /// <summary>
        /// Delete ContactosHistorialAsignaciones by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactosHistorialAsignaciones_DeleteByContactoUsuarios", ContactoUsuarios.Identifier());
        }

        /// <summary>
        /// Delete ContactosHistorialAsignaciones by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosHistorialAsignaciones_DeleteByContactoUsuarios", ContactoUsuarios.Identifier());
        }


    


        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








