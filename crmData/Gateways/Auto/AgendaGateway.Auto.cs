
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 18/5/2022 - 11:33 a.Â m.
// This is a partial class file. The other one is AgendaGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using crmRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace crmRules.Gateways
{

    public partial class AgendaGateway : BaseGateway<AgendaObject, AgendaObjectList>, IGenericGateway
    {

        #region "Singleton"

        static AgendaGateway _instance;

        private AgendaGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static AgendaGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new AgendaGateway();
                else {
                    AgendaGateway inst = HttpContext.Current.Items["crmRules.AgendaGatewaySingleton"] as AgendaGateway;
                    if (inst == null) {
                        inst = new AgendaGateway();
                        HttpContext.Current.Items.Add("crmRules.AgendaGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "Agenda"; }
        }

        protected override string RuleName
        {
            get {return typeof(AgendaGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, AgendaObject entity)
        {
            
            IMappeableAgendaObject Agenda = (IMappeableAgendaObject)entity;
            Agenda.HydrateFields(
            reader.GetInt32(0),
reader.GetDateTime(1),
reader.GetDateTime(2),
reader.GetDateTime(3),
reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6),
(reader.IsDBNull(7)) ? new System.Nullable<System.Int32>() : reader.GetInt32(7),
reader.GetInt32(8),
reader.GetBoolean(9));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(AgendaObject entity)
        {

            IMappeableAgendaObject Agenda = (IMappeableAgendaObject)entity;
            return Agenda.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(AgendaObject entity)
        {

            IMappeableAgendaObject Agenda = (IMappeableAgendaObject)entity;
            return Agenda.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(AgendaObject entity)
        {

            IMappeableAgendaObject Agenda = (IMappeableAgendaObject)entity;
            return Agenda.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(AgendaObject row, object[] parameters)
        {
            ((IMappeableAgendaObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        /// <summary>
        /// Get a AgendaObject by execute a SQL Query Text
        /// </summary>
        public AgendaObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a AgendaObjectList by execute a SQL Query Text
        /// </summary>
        public AgendaObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a AgendaObject by calling a Stored Procedure
        /// </summary>
        public AgendaObject GetOne(System.Int32 IdContactoAgenda)
        {
            return base.GetOne(new AgendaObject(IdContactoAgenda));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a AgendaObjectList by calling a Stored Procedure
        /// </summary>
        public AgendaObjectList GetByContactos(DbTransaction transaction,System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactos", IdContacto);
        }

        /// <summary>
        /// Get a AgendaObjectList by calling a Stored Procedure
        /// </summary>
        public AgendaObjectList GetByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// Get a AgendaObjectList by calling a Stored Procedure
        /// </summary>
        public AgendaObjectList GetByContactoUsuarios(DbTransaction transaction,System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// Get a AgendaObjectList by calling a Stored Procedure
        /// </summary>
        public AgendaObjectList GetByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    

        

        /// <summary>
        /// Get a AgendaObjectList by calling a Stored Procedure
        /// </summary>
        public AgendaObjectList GetByContactos(System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactos", IdContacto);
        }

        /// <summary>
        /// Get a AgendaObjectList by calling a Stored Procedure
        /// </summary>
        public AgendaObjectList GetByContactos(IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// Get a AgendaObjectList by calling a Stored Procedure
        /// </summary>
        public AgendaObjectList GetByContactoUsuarios(System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// Get a AgendaObjectList by calling a Stored Procedure
        /// </summary>
        public AgendaObjectList GetByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    

        /// <summary>
        /// Delete Agenda
        /// </summary>
        public void Delete(System.Int32 IdContactoAgenda)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Agenda_Delete", IdContactoAgenda);
        }

        /// <summary>
        /// Delete Agenda
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdContactoAgenda)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_Delete", IdContactoAgenda);
        }

            

        

        /// <summary>
        /// Delete Agenda by Contactos
        /// </summary>
        public void DeleteByContactos(System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Agenda_DeleteByContactos", IdContacto);
        }

        /// <summary>
        /// Delete Agenda by Contactos
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_DeleteByContactos", IdContacto);
        }

        /// <summary>
        /// Delete Agenda by Contactos
        /// </summary>
        public void DeleteByContactos(IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Agenda_DeleteByContactos", Contactos.Identifier());
        }

        /// <summary>
        /// Delete Agenda by Contactos
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_DeleteByContactos", Contactos.Identifier());
        }


    

        /// <summary>
        /// Delete Agenda by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Agenda_DeleteByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// Delete Agenda by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(DbTransaction transaction, System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_DeleteByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// Delete Agenda by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Agenda_DeleteByContactoUsuarios", ContactoUsuarios.Identifier());
        }

        /// <summary>
        /// Delete Agenda by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_DeleteByContactoUsuarios", ContactoUsuarios.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public AgendaObjectList ControlAgenda(System.Int32 idusuario, System.DateTime desde, System.DateTime hasta) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_ControlAgenda" , idusuario, desde, hasta);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public AgendaObjectList ControlAgenda(DbTransaction transaction , System.Int32 idusuario, System.DateTime desde, System.DateTime hasta) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_ControlAgenda" , idusuario, desde, hasta);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








