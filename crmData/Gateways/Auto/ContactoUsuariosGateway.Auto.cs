
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 29/4/2022 - 06:52 p.Â m.
// This is a partial class file. The other one is ContactoUsuariosGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using crmRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace crmRules.Gateways
{

    public partial class ContactoUsuariosGateway : BaseGateway<ContactoUsuariosObject, ContactoUsuariosObjectList>, IGenericGateway
    {

        #region "Singleton"

        static ContactoUsuariosGateway _instance;

        private ContactoUsuariosGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static ContactoUsuariosGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ContactoUsuariosGateway();
                else {
                    ContactoUsuariosGateway inst = HttpContext.Current.Items["crmRules.ContactoUsuariosGatewaySingleton"] as ContactoUsuariosGateway;
                    if (inst == null) {
                        inst = new ContactoUsuariosGateway();
                        HttpContext.Current.Items.Add("crmRules.ContactoUsuariosGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "ContactoUsuarios"; }
        }

        protected override string RuleName
        {
            get {return typeof(ContactoUsuariosGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ContactoUsuariosObject entity)
        {
            
            IMappeableContactoUsuariosObject ContactoUsuarios = (IMappeableContactoUsuariosObject)entity;
            ContactoUsuarios.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
reader.GetString(5),
reader.GetString(6),
reader.GetInt32(7),
reader.GetBoolean(8));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(ContactoUsuariosObject entity)
        {

            IMappeableContactoUsuariosObject ContactoUsuarios = (IMappeableContactoUsuariosObject)entity;
            return ContactoUsuarios.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(ContactoUsuariosObject entity)
        {

            IMappeableContactoUsuariosObject ContactoUsuarios = (IMappeableContactoUsuariosObject)entity;
            return ContactoUsuarios.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(ContactoUsuariosObject entity)
        {

            IMappeableContactoUsuariosObject ContactoUsuarios = (IMappeableContactoUsuariosObject)entity;
            return ContactoUsuarios.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ContactoUsuariosObject row, object[] parameters)
        {
            ((IMappeableContactoUsuariosObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        /// <summary>
        /// Get a ContactoUsuariosObject by execute a SQL Query Text
        /// </summary>
        public ContactoUsuariosObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ContactoUsuariosObjectList by execute a SQL Query Text
        /// </summary>
        public ContactoUsuariosObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a ContactoUsuariosObject by calling a Stored Procedure
        /// </summary>
        public ContactoUsuariosObject GetOne(System.Int32 IdUsuario)
        {
            return base.GetOne(new ContactoUsuariosObject(IdUsuario));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a ContactoUsuariosObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoUsuariosObjectList GetByContactosTipoUsuario(DbTransaction transaction,System.Int32 IdTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", IdTipoUsuario);
        }

        /// <summary>
        /// Get a ContactoUsuariosObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoUsuariosObjectList GetByContactosTipoUsuario(DbTransaction transaction, IUniqueIdentifiable ContactosTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", ContactosTipoUsuario.Identifier());
        }

    

        

        /// <summary>
        /// Get a ContactoUsuariosObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoUsuariosObjectList GetByContactosTipoUsuario(System.Int32 IdTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", IdTipoUsuario);
        }

        /// <summary>
        /// Get a ContactoUsuariosObjectList by calling a Stored Procedure
        /// </summary>
        public ContactoUsuariosObjectList GetByContactosTipoUsuario(IUniqueIdentifiable ContactosTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", ContactosTipoUsuario.Identifier());
        }

    

        /// <summary>
        /// Delete ContactoUsuarios
        /// </summary>
        public void Delete(System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_Delete", IdUsuario);
        }

        /// <summary>
        /// Delete ContactoUsuarios
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_Delete", IdUsuario);
        }

            

        

        /// <summary>
        /// Delete ContactoUsuarios by ContactosTipoUsuario
        /// </summary>
        public void DeleteByContactosTipoUsuario(System.Int32 IdTipoUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_DeleteByContactosTipoUsuario", IdTipoUsuario);
        }

        /// <summary>
        /// Delete ContactoUsuarios by ContactosTipoUsuario
        /// </summary>
        public void DeleteByContactosTipoUsuario(DbTransaction transaction, System.Int32 IdTipoUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_DeleteByContactosTipoUsuario", IdTipoUsuario);
        }

        /// <summary>
        /// Delete ContactoUsuarios by ContactosTipoUsuario
        /// </summary>
        public void DeleteByContactosTipoUsuario(IUniqueIdentifiable ContactosTipoUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_DeleteByContactosTipoUsuario", ContactosTipoUsuario.Identifier());
        }

        /// <summary>
        /// Delete ContactoUsuarios by ContactosTipoUsuario
        /// </summary>
        public void DeleteByContactosTipoUsuario(DbTransaction transaction, IUniqueIdentifiable ContactosTipoUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_DeleteByContactosTipoUsuario", ContactosTipoUsuario.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuariosObject Login(System.String usuario, System.String contra) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_Login" , usuario, contra);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuariosObject Login(DbTransaction transaction , System.String usuario, System.String contra) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_Login" , usuario, contra);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuariosObject GetByUsuario(System.String usuario) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_GetByUsuario" , usuario);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuariosObject GetByUsuario(DbTransaction transaction , System.String usuario) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_GetByUsuario" , usuario);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








