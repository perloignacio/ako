
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 18/5/2022 - 11:33 a.Â m.
// This is a partial class file. The other one is ContactosGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using crmRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace crmRules.Gateways
{

    public partial class ContactosGateway : BaseGateway<ContactosObject, ContactosObjectList>, IGenericGateway
    {

        #region "Singleton"

        static ContactosGateway _instance;

        private ContactosGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static ContactosGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ContactosGateway();
                else {
                    ContactosGateway inst = HttpContext.Current.Items["crmRules.ContactosGatewaySingleton"] as ContactosGateway;
                    if (inst == null) {
                        inst = new ContactosGateway();
                        HttpContext.Current.Items.Add("crmRules.ContactosGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "Contactos"; }
        }

        protected override string RuleName
        {
            get {return typeof(ContactosGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ContactosObject entity)
        {
            
            IMappeableContactosObject Contactos = (IMappeableContactosObject)entity;
            Contactos.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
(reader.IsDBNull(5)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6),
(reader.IsDBNull(7)) ? "" : reader.GetString(7),
(reader.IsDBNull(8)) ? "" : reader.GetString(8),
(reader.IsDBNull(9)) ? "" : reader.GetString(9),
reader.GetBoolean(10),
(reader.IsDBNull(11)) ? "" : reader.GetString(11),
(reader.IsDBNull(12)) ? "" : reader.GetString(12),
(reader.IsDBNull(13)) ? "" : reader.GetString(13),
(reader.IsDBNull(14)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(14),
(reader.IsDBNull(15)) ? new System.Nullable<System.Int32>() : reader.GetInt32(15),
(reader.IsDBNull(16)) ? "" : reader.GetString(16),
(reader.IsDBNull(17)) ? "" : reader.GetString(17),
(reader.IsDBNull(18)) ? "" : reader.GetString(18));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(ContactosObject entity)
        {

            IMappeableContactosObject Contactos = (IMappeableContactosObject)entity;
            return Contactos.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(ContactosObject entity)
        {

            IMappeableContactosObject Contactos = (IMappeableContactosObject)entity;
            return Contactos.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(ContactosObject entity)
        {

            IMappeableContactosObject Contactos = (IMappeableContactosObject)entity;
            return Contactos.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ContactosObject row, object[] parameters)
        {
            ((IMappeableContactosObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        /// <summary>
        /// Get a ContactosObject by execute a SQL Query Text
        /// </summary>
        public ContactosObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ContactosObjectList by execute a SQL Query Text
        /// </summary>
        public ContactosObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a ContactosObject by calling a Stored Procedure
        /// </summary>
        public ContactosObject GetOne(System.Int32 IdContacto)
        {
            return base.GetOne(new ContactosObject(IdContacto));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a ContactosObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosObjectList GetByContactosOrigen(DbTransaction transaction,System.Int32 IdOrigen)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Contactos_GetByContactosOrigen", IdOrigen);
        }

        /// <summary>
        /// Get a ContactosObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosObjectList GetByContactosOrigen(DbTransaction transaction, IUniqueIdentifiable ContactosOrigen)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Contactos_GetByContactosOrigen", ContactosOrigen.Identifier());
        }

    

        

        /// <summary>
        /// Get a ContactosObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosObjectList GetByContactosOrigen(System.Int32 IdOrigen)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Contactos_GetByContactosOrigen", IdOrigen);
        }

        /// <summary>
        /// Get a ContactosObjectList by calling a Stored Procedure
        /// </summary>
        public ContactosObjectList GetByContactosOrigen(IUniqueIdentifiable ContactosOrigen)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Contactos_GetByContactosOrigen", ContactosOrigen.Identifier());
        }

    

        /// <summary>
        /// Delete Contactos
        /// </summary>
        public void Delete(System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Contactos_Delete", IdContacto);
        }

        /// <summary>
        /// Delete Contactos
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Contactos_Delete", IdContacto);
        }

            

        

        /// <summary>
        /// Delete Contactos by ContactosOrigen
        /// </summary>
        public void DeleteByContactosOrigen(System.Int32 IdOrigen)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Contactos_DeleteByContactosOrigen", IdOrigen);
        }

        /// <summary>
        /// Delete Contactos by ContactosOrigen
        /// </summary>
        public void DeleteByContactosOrigen(DbTransaction transaction, System.Int32 IdOrigen)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Contactos_DeleteByContactosOrigen", IdOrigen);
        }

        /// <summary>
        /// Delete Contactos by ContactosOrigen
        /// </summary>
        public void DeleteByContactosOrigen(IUniqueIdentifiable ContactosOrigen)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Contactos_DeleteByContactosOrigen", ContactosOrigen.Identifier());
        }

        /// <summary>
        /// Delete Contactos by ContactosOrigen
        /// </summary>
        public void DeleteByContactosOrigen(DbTransaction transaction, IUniqueIdentifiable ContactosOrigen)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Contactos_DeleteByContactosOrigen", ContactosOrigen.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public ContactosObject GetByEmail(System.String email) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Contactos_GetByEmail" , email);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ContactosObject GetByEmail(DbTransaction transaction , System.String email) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Contactos_GetByEmail" , email);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public ContactosObjectList GetMios(System.Int32 idusuario) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Contactos_GetMios" , idusuario);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ContactosObjectList GetMios(DbTransaction transaction , System.Int32 idusuario) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Contactos_GetMios" , idusuario);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








