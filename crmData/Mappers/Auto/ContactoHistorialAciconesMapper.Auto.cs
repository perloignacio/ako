
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 22/4/2022 - 03:14 p.Â m.
// This is a partial class file. The other one is ContactoHistorialAciconesMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using crmRules.Entities;
using crmRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace crmRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class ContactoHistorialAciconesMapper : BaseGateway<ContactoHistorialAcicones, ContactoHistorialAciconesList>, IGenericGateway
    {


        #region "Singleton"

        static ContactoHistorialAciconesMapper _instance;

        private ContactoHistorialAciconesMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ContactoHistorialAciconesMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ContactoHistorialAciconesMapper();
                else {
                    ContactoHistorialAciconesMapper inst = HttpContext.Current.Items["crmRules.ContactoHistorialAciconesMapperSingleton"] as ContactoHistorialAciconesMapper;
                    if (inst == null) {
                        inst = new ContactoHistorialAciconesMapper();
                        HttpContext.Current.Items.Add("crmRules.ContactoHistorialAciconesMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdHistorialAcciones"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ContactoHistorialAcicones);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ContactoHistorialAcicones"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(ContactoHistorialAciconesMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ContactoHistorialAcicones entity)
        {
            
            IMappeableContactoHistorialAciconesObject ContactoHistorialAcicones = (IMappeableContactoHistorialAciconesObject)entity;
            ContactoHistorialAcicones.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
reader.GetInt32(3),
reader.GetInt32(4),
reader.GetDateTime(5),
reader.GetBoolean(6));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(ContactoHistorialAcicones entity)
        {

            IMappeableContactoHistorialAciconesObject ContactoHistorialAcicones = (IMappeableContactoHistorialAciconesObject)entity;
            return ContactoHistorialAcicones.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(ContactoHistorialAcicones entity)
        {

            IMappeableContactoHistorialAciconesObject ContactoHistorialAcicones = (IMappeableContactoHistorialAciconesObject)entity;
            return ContactoHistorialAcicones.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(ContactoHistorialAcicones entity)
        {

            IMappeableContactoHistorialAciconesObject ContactoHistorialAcicones = (IMappeableContactoHistorialAciconesObject)entity;
            return ContactoHistorialAcicones.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ContactoHistorialAcicones entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableContactoHistorialAciconesObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(ContactoHistorialAcicones entity)
        {
            Entities.Contactos ContactosEntity = null; // Lazy load
Entities.ContactosTipoAcciones ContactosTipoAccionesEntity = null; // Lazy load
Entities.ContactoUsuarios ContactoUsuariosEntity = null; // Lazy load
            ((IMappeableContactoHistorialAcicones)entity).CompleteEntity(ContactosEntity, ContactosTipoAccionesEntity, ContactoUsuariosEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a ContactoHistorialAcicones by execute a SQL Query Text
        /// </summary>
        public ContactoHistorialAcicones GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesList by execute a SQL Query Text
        /// </summary>
        public ContactoHistorialAciconesList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAcicones GetOne(System.Int32 IdHistorialAcciones)
        {
            return base.GetOne(new ContactoHistorialAcicones(IdHistorialAcciones));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactosTipoAcciones(DbTransaction transaction, System.Int32 IdTipoAccion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", IdTipoAccion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactosTipoAcciones(DbTransaction transaction, IUniqueIdentifiable ContactosTipoAcciones)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", ContactosTipoAcciones.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactoUsuarios(DbTransaction transaction, System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactos(System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactos(IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactosTipoAcciones(System.Int32 IdTipoAccion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", IdTipoAccion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactosTipoAcciones(IUniqueIdentifiable ContactosTipoAcciones)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", ContactosTipoAcciones.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactoUsuarios(System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ContactoHistorialAciconesList GetByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdHistorialAcciones)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_Delete", IdHistorialAcciones);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdHistorialAcciones)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_Delete", IdHistorialAcciones);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactos", IdContacto);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactos", Contactos.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactos", Contactos.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactosTipoAcciones(System.Int32 IdTipoAccion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactosTipoAcciones", IdTipoAccion);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactosTipoAcciones(DbTransaction transaction, System.Int32 IdTipoAccion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactosTipoAcciones", IdTipoAccion);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactosTipoAcciones(IUniqueIdentifiable ContactosTipoAcciones)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactosTipoAcciones", ContactosTipoAcciones.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactosTipoAcciones(DbTransaction transaction, IUniqueIdentifiable ContactosTipoAcciones)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactosTipoAcciones", ContactosTipoAcciones.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactoUsuarios(System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactoUsuarios(DbTransaction transaction, System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactoUsuarios", IdUsuario);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactoUsuarios", ContactoUsuarios.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_DeleteByContactoUsuarios", ContactoUsuarios.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace crmRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class ContactoHistorialAciconesMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public crmRules.Mappers.ContactoHistorialAciconesMapper Instance()
        {
            return crmRules.Mappers.ContactoHistorialAciconesMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a ContactoHistorialAciconesEntity by calling a Stored Procedure
        /// </summary>
        public Entities.ContactoHistorialAcicones GetOne(System.Int32 IdHistorialAcciones) {
            return Instance().GetOne( IdHistorialAcciones);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a ContactoHistorialAciconesList by calling a Stored Procedure
        /// </summary>
        public Entities.ContactoHistorialAciconesList GetByContactos(System.Int32 IdContacto)
        {
            return Instance().GetByContactos(IdContacto);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesList by calling a Stored Procedure
        /// </summary>
        public Entities.ContactoHistorialAciconesList GetByContactos(IUniqueIdentifiable Contactos)
        {
            return Instance().GetByContactos(Contactos);
        }

    

        /// <summary>
        /// Get a ContactoHistorialAciconesList by calling a Stored Procedure
        /// </summary>
        public Entities.ContactoHistorialAciconesList GetByContactosTipoAcciones(System.Int32 IdTipoAccion)
        {
            return Instance().GetByContactosTipoAcciones(IdTipoAccion);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesList by calling a Stored Procedure
        /// </summary>
        public Entities.ContactoHistorialAciconesList GetByContactosTipoAcciones(IUniqueIdentifiable ContactosTipoAcciones)
        {
            return Instance().GetByContactosTipoAcciones(ContactosTipoAcciones);
        }

    

        /// <summary>
        /// Get a ContactoHistorialAciconesList by calling a Stored Procedure
        /// </summary>
        public Entities.ContactoHistorialAciconesList GetByContactoUsuarios(System.Int32 IdUsuario)
        {
            return Instance().GetByContactoUsuarios(IdUsuario);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesList by calling a Stored Procedure
        /// </summary>
        public Entities.ContactoHistorialAciconesList GetByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            return Instance().GetByContactoUsuarios(ContactoUsuarios);
        }

    

       

        /// <summary>
        /// Delete children for ContactoHistorialAcicones
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, ContactoHistorialAcicones entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete ContactoHistorialAcicones by Contactos
        /// </summary>
        public void DeleteByContactos(System.Int32 IdContacto)
        {
            Instance().DeleteByContactos(IdContacto);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by Contactos
        /// </summary>
        public void DeleteByContactos(IUniqueIdentifiable Contactos)
        {
            Instance().DeleteByContactos(Contactos);
        }

    

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactosTipoAcciones
        /// </summary>
        public void DeleteByContactosTipoAcciones(System.Int32 IdTipoAccion)
        {
            Instance().DeleteByContactosTipoAcciones(IdTipoAccion);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactosTipoAcciones
        /// </summary>
        public void DeleteByContactosTipoAcciones(IUniqueIdentifiable ContactosTipoAcciones)
        {
            Instance().DeleteByContactosTipoAcciones(ContactosTipoAcciones);
        }

    

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(System.Int32 IdUsuario)
        {
            Instance().DeleteByContactoUsuarios(IdUsuario);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            Instance().DeleteByContactoUsuarios(ContactoUsuarios);
        }

    
        /// <summary>
        /// Delete ContactoHistorialAcicones 
        /// </summary>
        public void Delete(System.Int32 IdHistorialAcciones){
            Instance().Delete(IdHistorialAcciones);
        }

        /// <summary>
        /// Delete ContactoHistorialAcicones 
        /// </summary>
        public void Delete(Entities.ContactoHistorialAcicones entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save ContactoHistorialAcicones  
        /// </summary>
        public void Save(Entities.ContactoHistorialAcicones entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ContactoHistorialAcicones 
        /// </summary>
        public void Insert(Entities.ContactoHistorialAcicones entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll ContactoHistorialAcicones 
        /// </summary>
        public Entities.ContactoHistorialAciconesList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save ContactoHistorialAcicones 
        /// </summary>
        public void Save(System.Int32 IdHistorialAcciones, System.Int32 IdTipoAccion, System.String Accion, System.Int32 IdContacto, System.Int32 IdUsuario, System.DateTime Fecha, System.Boolean Activo){
            Entities.ContactoHistorialAcicones entity = Instance().GetOne(IdHistorialAcciones);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdHistorialAcciones", IdHistorialAcciones));

            entity.IdTipoAccion = IdTipoAccion;
            entity.Accion = Accion;
            entity.IdContacto = IdContacto;
            entity.IdUsuario = IdUsuario;
            entity.Fecha = Fecha;
            entity.Activo = Activo;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ContactoHistorialAcicones
        /// </summary>
        public void Insert(System.Int32 IdTipoAccion, System.String Accion, System.Int32 IdContacto, System.Int32 IdUsuario, System.DateTime Fecha, System.Boolean Activo){
            Entities.ContactoHistorialAcicones entity = new Entities.ContactoHistorialAcicones();

            entity.IdTipoAccion = IdTipoAccion;
            entity.Accion = Accion;
            entity.IdContacto = IdContacto;
            entity.IdUsuario = IdUsuario;
            entity.Fecha = Fecha;
            entity.Activo = Activo;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace crmRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ContactoHistorialAciconesLoader<T> : BaseLoader< T, ContactoHistorialAcicones, ObjectList<T>>, IGenericGateway where T : ContactoHistorialAcicones, new()
    {

        #region "Singleton"

        static ContactoHistorialAciconesLoader<T> _instance;

        private ContactoHistorialAciconesLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ContactoHistorialAciconesLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ContactoHistorialAciconesLoader<T>();
                else {
                    ContactoHistorialAciconesLoader<T> inst = HttpContext.Current.Items["crmRules.ContactoHistorialAciconesLoaderSingleton"] as ContactoHistorialAciconesLoader<T>;
                    if (inst == null) {
                        inst = new ContactoHistorialAciconesLoader<T>();
                        HttpContext.Current.Items.Add("crmRules.ContactoHistorialAciconesLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdHistorialAcciones"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ContactoHistorialAcicones);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ContactoHistorialAcicones"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ContactoHistorialAcicones entity)
        {
            
            IMappeableContactoHistorialAciconesObject ContactoHistorialAcicones = (IMappeableContactoHistorialAciconesObject)entity;
            ContactoHistorialAcicones.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
reader.GetInt32(3),
reader.GetInt32(4),
reader.GetDateTime(5),
reader.GetBoolean(6));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.Contactos ContactosEntity = null; // Lazy load
Entities.ContactosTipoAcciones ContactosTipoAccionesEntity = null; // Lazy load
Entities.ContactoUsuarios ContactoUsuariosEntity = null; // Lazy load
            ((IMappeableContactoHistorialAcicones)entity).CompleteEntity(ContactosEntity, ContactosTipoAccionesEntity, ContactoUsuariosEntity);
        }


        



        /// <summary>
        /// Get a ContactoHistorialAcicones by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ContactoHistorialAciconesList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdHistorialAcciones)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetOne", IdHistorialAcciones);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactosTipoAcciones(DbTransaction transaction, System.Int32 IdTipoAccion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", IdTipoAccion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactosTipoAcciones(DbTransaction transaction, IUniqueIdentifiable ContactosTipoAcciones)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", ContactosTipoAcciones.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactoUsuarios(DbTransaction transaction, System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactosTipoAcciones(System.Int32 IdTipoAccion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", IdTipoAccion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactosTipoAcciones(IUniqueIdentifiable ContactosTipoAcciones)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactosTipoAcciones", ContactosTipoAcciones.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactoUsuarios(System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoHistorialAcicones_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





