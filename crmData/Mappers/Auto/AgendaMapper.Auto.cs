
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 29/4/2022 - 06:52 p.Â m.
// This is a partial class file. The other one is AgendaMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using crmRules.Entities;
using crmRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace crmRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class AgendaMapper : BaseGateway<Agenda, AgendaList>, IGenericGateway
    {


        #region "Singleton"

        static AgendaMapper _instance;

        private AgendaMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static AgendaMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new AgendaMapper();
                else {
                    AgendaMapper inst = HttpContext.Current.Items["crmRules.AgendaMapperSingleton"] as AgendaMapper;
                    if (inst == null) {
                        inst = new AgendaMapper();
                        HttpContext.Current.Items.Add("crmRules.AgendaMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdContactoAgenda"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Agenda);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Agenda"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(AgendaMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Agenda entity)
        {
            
            IMappeableAgendaObject Agenda = (IMappeableAgendaObject)entity;
            Agenda.HydrateFields(
            reader.GetInt32(0),
reader.GetDateTime(1),
reader.GetDateTime(2),
reader.GetDateTime(3),
reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6),
(reader.IsDBNull(7)) ? new System.Nullable<System.Int32>() : reader.GetInt32(7),
reader.GetInt32(8),
reader.GetBoolean(9));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(Agenda entity)
        {

            IMappeableAgendaObject Agenda = (IMappeableAgendaObject)entity;
            return Agenda.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(Agenda entity)
        {

            IMappeableAgendaObject Agenda = (IMappeableAgendaObject)entity;
            return Agenda.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(Agenda entity)
        {

            IMappeableAgendaObject Agenda = (IMappeableAgendaObject)entity;
            return Agenda.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(Agenda entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableAgendaObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(Agenda entity)
        {
            Entities.Contactos ContactosEntity = null; // Lazy load
Entities.ContactoUsuarios ContactoUsuariosEntity = null; // Lazy load
            ((IMappeableAgenda)entity).CompleteEntity(ContactosEntity, ContactoUsuariosEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a Agenda by execute a SQL Query Text
        /// </summary>
        public Agenda GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a AgendaList by execute a SQL Query Text
        /// </summary>
        public AgendaList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public Agenda GetOne(System.Int32 IdContactoAgenda)
        {
            return base.GetOne(new Agenda(IdContactoAgenda));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public AgendaList GetByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public AgendaList GetByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public AgendaList GetByContactoUsuarios(DbTransaction transaction, System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public AgendaList GetByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public AgendaList GetByContactos(System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public AgendaList GetByContactos(IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public AgendaList GetByContactoUsuarios(System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public AgendaList GetByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdContactoAgenda)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Agenda_Delete", IdContactoAgenda);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdContactoAgenda)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_Delete", IdContactoAgenda);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Agenda_DeleteByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_DeleteByContactos", IdContacto);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Agenda_DeleteByContactos", Contactos.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_DeleteByContactos", Contactos.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactoUsuarios(System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Agenda_DeleteByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactoUsuarios(DbTransaction transaction, System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_DeleteByContactoUsuarios", IdUsuario);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Agenda_DeleteByContactoUsuarios", ContactoUsuarios.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_DeleteByContactoUsuarios", ContactoUsuarios.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public AgendaList ControlAgenda(System.Int32 idusuario, System.DateTime desde, System.DateTime hasta) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_ControlAgenda" , idusuario, desde, hasta);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public AgendaList ControlAgenda(DbTransaction transaction , System.Int32 idusuario, System.DateTime desde, System.DateTime hasta) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_ControlAgenda" , idusuario, desde, hasta);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace crmRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class AgendaMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public crmRules.Mappers.AgendaMapper Instance()
        {
            return crmRules.Mappers.AgendaMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a AgendaEntity by calling a Stored Procedure
        /// </summary>
        public Entities.Agenda GetOne(System.Int32 IdContactoAgenda) {
            return Instance().GetOne( IdContactoAgenda);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a AgendaList by calling a Stored Procedure
        /// </summary>
        public Entities.AgendaList GetByContactos(System.Int32 IdContacto)
        {
            return Instance().GetByContactos(IdContacto);
        }

        /// <summary>
        /// Get a AgendaList by calling a Stored Procedure
        /// </summary>
        public Entities.AgendaList GetByContactos(IUniqueIdentifiable Contactos)
        {
            return Instance().GetByContactos(Contactos);
        }

    

        /// <summary>
        /// Get a AgendaList by calling a Stored Procedure
        /// </summary>
        public Entities.AgendaList GetByContactoUsuarios(System.Int32 IdUsuario)
        {
            return Instance().GetByContactoUsuarios(IdUsuario);
        }

        /// <summary>
        /// Get a AgendaList by calling a Stored Procedure
        /// </summary>
        public Entities.AgendaList GetByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            return Instance().GetByContactoUsuarios(ContactoUsuarios);
        }

    

       

        /// <summary>
        /// Delete children for Agenda
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, Agenda entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete Agenda by Contactos
        /// </summary>
        public void DeleteByContactos(System.Int32 IdContacto)
        {
            Instance().DeleteByContactos(IdContacto);
        }

        /// <summary>
        /// Delete Agenda by Contactos
        /// </summary>
        public void DeleteByContactos(IUniqueIdentifiable Contactos)
        {
            Instance().DeleteByContactos(Contactos);
        }

    

        /// <summary>
        /// Delete Agenda by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(System.Int32 IdUsuario)
        {
            Instance().DeleteByContactoUsuarios(IdUsuario);
        }

        /// <summary>
        /// Delete Agenda by ContactoUsuarios
        /// </summary>
        public void DeleteByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            Instance().DeleteByContactoUsuarios(ContactoUsuarios);
        }

    
        /// <summary>
        /// Delete Agenda 
        /// </summary>
        public void Delete(System.Int32 IdContactoAgenda){
            Instance().Delete(IdContactoAgenda);
        }

        /// <summary>
        /// Delete Agenda 
        /// </summary>
        public void Delete(Entities.Agenda entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save Agenda  
        /// </summary>
        public void Save(Entities.Agenda entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Agenda 
        /// </summary>
        public void Insert(Entities.Agenda entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll Agenda 
        /// </summary>
        public Entities.AgendaList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save Agenda 
        /// </summary>
        public void Save(System.Int32 IdContactoAgenda, System.DateTime Fecha, System.DateTime FechaDesde, System.DateTime FechaHasta, System.String Asunto, System.String Descripcion, System.String Link, System.Int32 IdContacto, System.Int32 IdUsuario, System.Boolean Activo){
            Entities.Agenda entity = Instance().GetOne(IdContactoAgenda);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdContactoAgenda", IdContactoAgenda));

            entity.Fecha = Fecha;
            entity.FechaDesde = FechaDesde;
            entity.FechaHasta = FechaHasta;
            entity.Asunto = Asunto;
            entity.Descripcion = Descripcion;
            entity.Link = Link;
            entity.IdContacto = IdContacto;
            entity.IdUsuario = IdUsuario;
            entity.Activo = Activo;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Agenda
        /// </summary>
        public void Insert(System.DateTime Fecha, System.DateTime FechaDesde, System.DateTime FechaHasta, System.String Asunto, System.String Descripcion, System.String Link, System.Int32 IdContacto, System.Int32 IdUsuario, System.Boolean Activo){
            Entities.Agenda entity = new Entities.Agenda();

            entity.Fecha = Fecha;
            entity.FechaDesde = FechaDesde;
            entity.FechaHasta = FechaHasta;
            entity.Asunto = Asunto;
            entity.Descripcion = Descripcion;
            entity.Link = Link;
            entity.IdContacto = IdContacto;
            entity.IdUsuario = IdUsuario;
            entity.Activo = Activo;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public AgendaList ControlAgenda(System.Int32 idusuario, System.DateTime desde, System.DateTime hasta) {
            
                return Instance().ControlAgenda( idusuario, desde, hasta);
        }


        


    }
}





namespace crmRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class AgendaLoader<T> : BaseLoader< T, Agenda, ObjectList<T>>, IGenericGateway where T : Agenda, new()
    {

        #region "Singleton"

        static AgendaLoader<T> _instance;

        private AgendaLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static AgendaLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new AgendaLoader<T>();
                else {
                    AgendaLoader<T> inst = HttpContext.Current.Items["crmRules.AgendaLoaderSingleton"] as AgendaLoader<T>;
                    if (inst == null) {
                        inst = new AgendaLoader<T>();
                        HttpContext.Current.Items.Add("crmRules.AgendaLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdContactoAgenda"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Agenda);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Agenda"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Agenda entity)
        {
            
            IMappeableAgendaObject Agenda = (IMappeableAgendaObject)entity;
            Agenda.HydrateFields(
            reader.GetInt32(0),
reader.GetDateTime(1),
reader.GetDateTime(2),
reader.GetDateTime(3),
reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6),
(reader.IsDBNull(7)) ? new System.Nullable<System.Int32>() : reader.GetInt32(7),
reader.GetInt32(8),
reader.GetBoolean(9));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.Contactos ContactosEntity = null; // Lazy load
Entities.ContactoUsuarios ContactoUsuariosEntity = null; // Lazy load
            ((IMappeableAgenda)entity).CompleteEntity(ContactosEntity, ContactoUsuariosEntity);
        }


        



        /// <summary>
        /// Get a Agenda by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a AgendaList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdContactoAgenda)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetOne", IdContactoAgenda);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactoUsuarios(DbTransaction transaction, System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactoUsuarios(DbTransaction transaction, IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactoUsuarios(System.Int32 IdUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactoUsuarios(IUniqueIdentifiable ContactoUsuarios)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_GetByContactoUsuarios", ContactoUsuarios.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> ControlAgenda(System.Int32 idusuario, System.DateTime desde, System.DateTime hasta) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Agenda_ControlAgenda" , idusuario, desde, hasta);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> ControlAgenda(DbTransaction transaction , System.Int32 idusuario, System.DateTime desde, System.DateTime hasta) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Agenda_ControlAgenda" , idusuario, desde, hasta);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





