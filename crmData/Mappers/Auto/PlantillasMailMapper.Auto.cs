
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 18/5/2022 - 11:33 a.Â m.
// This is a partial class file. The other one is PlantillasMailMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using crmRules.Entities;
using crmRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace crmRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class PlantillasMailMapper : BaseGateway<PlantillasMailObject, PlantillasMailObjectList>, IGenericGateway
    {


        #region "Singleton"

        static PlantillasMailMapper _instance;

        private PlantillasMailMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PlantillasMailMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PlantillasMailMapper();
                else {
                    PlantillasMailMapper inst = HttpContext.Current.Items["crmRules.PlantillasMailMapperSingleton"] as PlantillasMailMapper;
                    if (inst == null) {
                        inst = new PlantillasMailMapper();
                        HttpContext.Current.Items.Add("crmRules.PlantillasMailMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdPlantillaEmail"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(PlantillasMailObject);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "PlantillasMail"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(PlantillasMailMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PlantillasMailObject entity)
        {
            
            IMappeablePlantillasMailObject PlantillasMail = (IMappeablePlantillasMailObject)entity;
            PlantillasMail.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
reader.GetBoolean(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(PlantillasMailObject entity)
        {

            IMappeablePlantillasMailObject PlantillasMail = (IMappeablePlantillasMailObject)entity;
            return PlantillasMail.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(PlantillasMailObject entity)
        {

            IMappeablePlantillasMailObject PlantillasMail = (IMappeablePlantillasMailObject)entity;
            return PlantillasMail.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(PlantillasMailObject entity)
        {

            IMappeablePlantillasMailObject PlantillasMail = (IMappeablePlantillasMailObject)entity;
            return PlantillasMail.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(PlantillasMailObject entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeablePlantillasMailObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


          





        /// <summary>
        /// Get a PlantillasMailObject by execute a SQL Query Text
        /// </summary>
        public PlantillasMailObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PlantillasMailObjectList by execute a SQL Query Text
        /// </summary>
        public PlantillasMailObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public PlantillasMailObject GetOne(System.Int32 IdPlantillaEmail)
        {
            return base.GetOne(new PlantillasMailObject(IdPlantillaEmail));
        }


        // GetOne By Objects and Params
            


        


        

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdPlantillaEmail)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PlantillasMail_Delete", IdPlantillaEmail);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdPlantillaEmail)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PlantillasMail_Delete", IdPlantillaEmail);
        }


        // Delete By Objects and Params
            



        


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace crmRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class PlantillasMailMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public crmRules.Mappers.PlantillasMailMapper Instance()
        {
            return crmRules.Mappers.PlantillasMailMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a PlantillasMailEntity by calling a Stored Procedure
        /// </summary>
        public Objects.PlantillasMailObject GetOne(System.Int32 IdPlantillaEmail) {
            return Instance().GetOne( IdPlantillaEmail);
        }

        // GetBy Objects and Params
            

        

       

            

        
        /// <summary>
        /// Delete PlantillasMail 
        /// </summary>
        public void Delete(System.Int32 IdPlantillaEmail){
            Instance().Delete(IdPlantillaEmail);
        }

        /// <summary>
        /// Delete PlantillasMailObject 
        /// </summary>
        public void Delete(Objects.PlantillasMailObject entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save PlantillasMailObject  
        /// </summary>
        public void Save(Objects.PlantillasMailObject entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert PlantillasMailObject 
        /// </summary>
        public void Insert(Objects.PlantillasMailObject entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll PlantillasMailObject 
        /// </summary>
        public Objects.PlantillasMailObjectList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save PlantillasMail 
        /// </summary>
        public void Save(System.Int32 IdPlantillaEmail, System.String Nombre, System.String Contenido, System.Boolean Activo){
            Objects.PlantillasMailObject entity = Instance().GetOne(IdPlantillaEmail);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdPlantillaEmail", IdPlantillaEmail));

            entity.Nombre = Nombre;
            entity.Contenido = Contenido;
            entity.Activo = Activo;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert PlantillasMailObject
        /// </summary>
        public void Insert(System.String Nombre, System.String Contenido, System.Boolean Activo){
            Objects.PlantillasMailObject entity = new Objects.PlantillasMailObject();

            entity.Nombre = Nombre;
            entity.Contenido = Contenido;
            entity.Activo = Activo;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace crmRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class PlantillasMailLoader<T> : BaseLoader< T, PlantillasMailObject, ObjectList<T>>, IGenericGateway where T : PlantillasMailObject, new()
    {

        #region "Singleton"

        static PlantillasMailLoader<T> _instance;

        private PlantillasMailLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PlantillasMailLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PlantillasMailLoader<T>();
                else {
                    PlantillasMailLoader<T> inst = HttpContext.Current.Items["crmRules.PlantillasMailLoaderSingleton"] as PlantillasMailLoader<T>;
                    if (inst == null) {
                        inst = new PlantillasMailLoader<T>();
                        HttpContext.Current.Items.Add("crmRules.PlantillasMailLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdPlantillaEmail"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(PlantillasMailObject);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "PlantillasMail"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PlantillasMailObject entity)
        {
            
            IMappeablePlantillasMailObject PlantillasMail = (IMappeablePlantillasMailObject)entity;
            PlantillasMail.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
reader.GetBoolean(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        



        /// <summary>
        /// Get a PlantillasMail by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PlantillasMailList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdPlantillaEmail)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "PlantillasMail_GetOne", IdPlantillaEmail);
        }


        // GetOne By Objects and Params
            


        


        

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





