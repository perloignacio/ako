
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 19/4/2022 - 03:39 p.Â m.
// This is a partial class file. The other one is ContactosDireccionesMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using crmRules.Entities;
using crmRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace crmRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class ContactosDireccionesMapper : BaseGateway<ContactosDirecciones, ContactosDireccionesList>, IGenericGateway
    {


        #region "Singleton"

        static ContactosDireccionesMapper _instance;

        private ContactosDireccionesMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ContactosDireccionesMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ContactosDireccionesMapper();
                else {
                    ContactosDireccionesMapper inst = HttpContext.Current.Items["crmRules.ContactosDireccionesMapperSingleton"] as ContactosDireccionesMapper;
                    if (inst == null) {
                        inst = new ContactosDireccionesMapper();
                        HttpContext.Current.Items.Add("crmRules.ContactosDireccionesMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdContactoDireccion"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ContactosDirecciones);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ContactosDirecciones"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(ContactosDireccionesMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ContactosDirecciones entity)
        {
            
            IMappeableContactosDireccionesObject ContactosDirecciones = (IMappeableContactosDireccionesObject)entity;
            ContactosDirecciones.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6),
reader.GetBoolean(7));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(ContactosDirecciones entity)
        {

            IMappeableContactosDireccionesObject ContactosDirecciones = (IMappeableContactosDireccionesObject)entity;
            return ContactosDirecciones.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(ContactosDirecciones entity)
        {

            IMappeableContactosDireccionesObject ContactosDirecciones = (IMappeableContactosDireccionesObject)entity;
            return ContactosDirecciones.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(ContactosDirecciones entity)
        {

            IMappeableContactosDireccionesObject ContactosDirecciones = (IMappeableContactosDireccionesObject)entity;
            return ContactosDirecciones.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ContactosDirecciones entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableContactosDireccionesObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(ContactosDirecciones entity)
        {
            Entities.Contactos ContactosEntity = null; // Lazy load
            ((IMappeableContactosDirecciones)entity).CompleteEntity(ContactosEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a ContactosDirecciones by execute a SQL Query Text
        /// </summary>
        public ContactosDirecciones GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ContactosDireccionesList by execute a SQL Query Text
        /// </summary>
        public ContactosDireccionesList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public ContactosDirecciones GetOne(System.Int32 IdContactoDireccion)
        {
            return base.GetOne(new ContactosDirecciones(IdContactoDireccion));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ContactosDireccionesList GetByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosDirecciones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public ContactosDireccionesList GetByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosDirecciones_GetByContactos", Contactos.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ContactosDireccionesList GetByContactos(System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactosDirecciones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public ContactosDireccionesList GetByContactos(IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactosDirecciones_GetByContactos", Contactos.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdContactoDireccion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactosDirecciones_Delete", IdContactoDireccion);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdContactoDireccion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosDirecciones_Delete", IdContactoDireccion);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactosDirecciones_DeleteByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosDirecciones_DeleteByContactos", IdContacto);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactosDirecciones_DeleteByContactos", Contactos.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosDirecciones_DeleteByContactos", Contactos.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace crmRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class ContactosDireccionesMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public crmRules.Mappers.ContactosDireccionesMapper Instance()
        {
            return crmRules.Mappers.ContactosDireccionesMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a ContactosDireccionesEntity by calling a Stored Procedure
        /// </summary>
        public Entities.ContactosDirecciones GetOne(System.Int32 IdContactoDireccion) {
            return Instance().GetOne( IdContactoDireccion);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a ContactosDireccionesList by calling a Stored Procedure
        /// </summary>
        public Entities.ContactosDireccionesList GetByContactos(System.Int32 IdContacto)
        {
            return Instance().GetByContactos(IdContacto);
        }

        /// <summary>
        /// Get a ContactosDireccionesList by calling a Stored Procedure
        /// </summary>
        public Entities.ContactosDireccionesList GetByContactos(IUniqueIdentifiable Contactos)
        {
            return Instance().GetByContactos(Contactos);
        }

    

       

        /// <summary>
        /// Delete children for ContactosDirecciones
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, ContactosDirecciones entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete ContactosDirecciones by Contactos
        /// </summary>
        public void DeleteByContactos(System.Int32 IdContacto)
        {
            Instance().DeleteByContactos(IdContacto);
        }

        /// <summary>
        /// Delete ContactosDirecciones by Contactos
        /// </summary>
        public void DeleteByContactos(IUniqueIdentifiable Contactos)
        {
            Instance().DeleteByContactos(Contactos);
        }

    
        /// <summary>
        /// Delete ContactosDirecciones 
        /// </summary>
        public void Delete(System.Int32 IdContactoDireccion){
            Instance().Delete(IdContactoDireccion);
        }

        /// <summary>
        /// Delete ContactosDirecciones 
        /// </summary>
        public void Delete(Entities.ContactosDirecciones entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save ContactosDirecciones  
        /// </summary>
        public void Save(Entities.ContactosDirecciones entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ContactosDirecciones 
        /// </summary>
        public void Insert(Entities.ContactosDirecciones entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll ContactosDirecciones 
        /// </summary>
        public Entities.ContactosDireccionesList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save ContactosDirecciones 
        /// </summary>
        public void Save(System.Int32 IdContactoDireccion, System.Int32 IdContacto, System.String Nombre, System.String Calle, System.String Nro, System.String Localidad, System.String Provincia, System.Boolean Activo){
            Entities.ContactosDirecciones entity = Instance().GetOne(IdContactoDireccion);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdContactoDireccion", IdContactoDireccion));

            entity.IdContacto = IdContacto;
            entity.Nombre = Nombre;
            entity.Calle = Calle;
            entity.Nro = Nro;
            entity.Localidad = Localidad;
            entity.Provincia = Provincia;
            entity.Activo = Activo;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ContactosDirecciones
        /// </summary>
        public void Insert(System.Int32 IdContacto, System.String Nombre, System.String Calle, System.String Nro, System.String Localidad, System.String Provincia, System.Boolean Activo){
            Entities.ContactosDirecciones entity = new Entities.ContactosDirecciones();

            entity.IdContacto = IdContacto;
            entity.Nombre = Nombre;
            entity.Calle = Calle;
            entity.Nro = Nro;
            entity.Localidad = Localidad;
            entity.Provincia = Provincia;
            entity.Activo = Activo;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace crmRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ContactosDireccionesLoader<T> : BaseLoader< T, ContactosDirecciones, ObjectList<T>>, IGenericGateway where T : ContactosDirecciones, new()
    {

        #region "Singleton"

        static ContactosDireccionesLoader<T> _instance;

        private ContactosDireccionesLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ContactosDireccionesLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ContactosDireccionesLoader<T>();
                else {
                    ContactosDireccionesLoader<T> inst = HttpContext.Current.Items["crmRules.ContactosDireccionesLoaderSingleton"] as ContactosDireccionesLoader<T>;
                    if (inst == null) {
                        inst = new ContactosDireccionesLoader<T>();
                        HttpContext.Current.Items.Add("crmRules.ContactosDireccionesLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdContactoDireccion"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ContactosDirecciones);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ContactosDirecciones"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ContactosDirecciones entity)
        {
            
            IMappeableContactosDireccionesObject ContactosDirecciones = (IMappeableContactosDireccionesObject)entity;
            ContactosDirecciones.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6),
reader.GetBoolean(7));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.Contactos ContactosEntity = null; // Lazy load
            ((IMappeableContactosDirecciones)entity).CompleteEntity(ContactosEntity);
        }


        



        /// <summary>
        /// Get a ContactosDirecciones by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ContactosDireccionesList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdContactoDireccion)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ContactosDirecciones_GetOne", IdContactoDireccion);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(DbTransaction transaction, System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosDirecciones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(DbTransaction transaction, IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactosDirecciones_GetByContactos", Contactos.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(System.Int32 IdContacto)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactosDirecciones_GetByContactos", IdContacto);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactos(IUniqueIdentifiable Contactos)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactosDirecciones_GetByContactos", Contactos.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





