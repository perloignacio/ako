
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 29/4/2022 - 06:52 p.Â m.
// This is a partial class file. The other one is ContactoUsuariosMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using crmRules.Entities;
using crmRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace crmRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class ContactoUsuariosMapper : BaseGateway<ContactoUsuarios, ContactoUsuariosList>, IGenericGateway
    {


        #region "Singleton"

        static ContactoUsuariosMapper _instance;

        private ContactoUsuariosMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ContactoUsuariosMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ContactoUsuariosMapper();
                else {
                    ContactoUsuariosMapper inst = HttpContext.Current.Items["crmRules.ContactoUsuariosMapperSingleton"] as ContactoUsuariosMapper;
                    if (inst == null) {
                        inst = new ContactoUsuariosMapper();
                        HttpContext.Current.Items.Add("crmRules.ContactoUsuariosMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdUsuario"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ContactoUsuarios);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ContactoUsuarios"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(ContactoUsuariosMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ContactoUsuarios entity)
        {
            
            IMappeableContactoUsuariosObject ContactoUsuarios = (IMappeableContactoUsuariosObject)entity;
            ContactoUsuarios.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
reader.GetString(5),
reader.GetString(6),
reader.GetInt32(7),
reader.GetBoolean(8));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(ContactoUsuarios entity)
        {

            IMappeableContactoUsuariosObject ContactoUsuarios = (IMappeableContactoUsuariosObject)entity;
            return ContactoUsuarios.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(ContactoUsuarios entity)
        {

            IMappeableContactoUsuariosObject ContactoUsuarios = (IMappeableContactoUsuariosObject)entity;
            return ContactoUsuarios.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(ContactoUsuarios entity)
        {

            IMappeableContactoUsuariosObject ContactoUsuarios = (IMappeableContactoUsuariosObject)entity;
            return ContactoUsuarios.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ContactoUsuarios entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableContactoUsuariosObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(ContactoUsuarios entity)
        {
            Entities.ContactosTipoUsuario ContactosTipoUsuarioEntity = null; // Lazy load
            ((IMappeableContactoUsuarios)entity).CompleteEntity(ContactosTipoUsuarioEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a ContactoUsuarios by execute a SQL Query Text
        /// </summary>
        public ContactoUsuarios GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ContactoUsuariosList by execute a SQL Query Text
        /// </summary>
        public ContactoUsuariosList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuarios GetOne(System.Int32 IdUsuario)
        {
            return base.GetOne(new ContactoUsuarios(IdUsuario));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuariosList GetByContactosTipoUsuario(DbTransaction transaction, System.Int32 IdTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", IdTipoUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuariosList GetByContactosTipoUsuario(DbTransaction transaction, IUniqueIdentifiable ContactosTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", ContactosTipoUsuario.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuariosList GetByContactosTipoUsuario(System.Int32 IdTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", IdTipoUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuariosList GetByContactosTipoUsuario(IUniqueIdentifiable ContactosTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", ContactosTipoUsuario.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_Delete", IdUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_Delete", IdUsuario);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactosTipoUsuario(System.Int32 IdTipoUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_DeleteByContactosTipoUsuario", IdTipoUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactosTipoUsuario(DbTransaction transaction, System.Int32 IdTipoUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_DeleteByContactosTipoUsuario", IdTipoUsuario);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactosTipoUsuario(IUniqueIdentifiable ContactosTipoUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_DeleteByContactosTipoUsuario", ContactosTipoUsuario.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByContactosTipoUsuario(DbTransaction transaction, IUniqueIdentifiable ContactosTipoUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_DeleteByContactosTipoUsuario", ContactosTipoUsuario.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuarios Login(System.String usuario, System.String contra) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_Login" , usuario, contra);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuarios Login(DbTransaction transaction , System.String usuario, System.String contra) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_Login" , usuario, contra);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuarios GetByUsuario(System.String usuario) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_GetByUsuario" , usuario);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuarios GetByUsuario(DbTransaction transaction , System.String usuario) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_GetByUsuario" , usuario);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace crmRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class ContactoUsuariosMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public crmRules.Mappers.ContactoUsuariosMapper Instance()
        {
            return crmRules.Mappers.ContactoUsuariosMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a ContactoUsuariosEntity by calling a Stored Procedure
        /// </summary>
        public Entities.ContactoUsuarios GetOne(System.Int32 IdUsuario) {
            return Instance().GetOne( IdUsuario);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a ContactoUsuariosList by calling a Stored Procedure
        /// </summary>
        public Entities.ContactoUsuariosList GetByContactosTipoUsuario(System.Int32 IdTipoUsuario)
        {
            return Instance().GetByContactosTipoUsuario(IdTipoUsuario);
        }

        /// <summary>
        /// Get a ContactoUsuariosList by calling a Stored Procedure
        /// </summary>
        public Entities.ContactoUsuariosList GetByContactosTipoUsuario(IUniqueIdentifiable ContactosTipoUsuario)
        {
            return Instance().GetByContactosTipoUsuario(ContactosTipoUsuario);
        }

    

       

        /// <summary>
        /// Delete children for ContactoUsuarios
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, ContactoUsuarios entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete ContactoUsuarios by ContactosTipoUsuario
        /// </summary>
        public void DeleteByContactosTipoUsuario(System.Int32 IdTipoUsuario)
        {
            Instance().DeleteByContactosTipoUsuario(IdTipoUsuario);
        }

        /// <summary>
        /// Delete ContactoUsuarios by ContactosTipoUsuario
        /// </summary>
        public void DeleteByContactosTipoUsuario(IUniqueIdentifiable ContactosTipoUsuario)
        {
            Instance().DeleteByContactosTipoUsuario(ContactosTipoUsuario);
        }

    
        /// <summary>
        /// Delete ContactoUsuarios 
        /// </summary>
        public void Delete(System.Int32 IdUsuario){
            Instance().Delete(IdUsuario);
        }

        /// <summary>
        /// Delete ContactoUsuarios 
        /// </summary>
        public void Delete(Entities.ContactoUsuarios entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save ContactoUsuarios  
        /// </summary>
        public void Save(Entities.ContactoUsuarios entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ContactoUsuarios 
        /// </summary>
        public void Insert(Entities.ContactoUsuarios entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll ContactoUsuarios 
        /// </summary>
        public Entities.ContactoUsuariosList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save ContactoUsuarios 
        /// </summary>
        public void Save(System.Int32 IdUsuario, System.String Nombre, System.String Apellido, System.String Email, System.String Telefono, System.String Usuario, System.String Contra, System.Int32 IdTipoUsuario, System.Boolean Activo){
            Entities.ContactoUsuarios entity = Instance().GetOne(IdUsuario);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdUsuario", IdUsuario));

            entity.Nombre = Nombre;
            entity.Apellido = Apellido;
            entity.Email = Email;
            entity.Telefono = Telefono;
            entity.Usuario = Usuario;
            entity.Contra = Contra;
            entity.IdTipoUsuario = IdTipoUsuario;
            entity.Activo = Activo;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ContactoUsuarios
        /// </summary>
        public void Insert(System.String Nombre, System.String Apellido, System.String Email, System.String Telefono, System.String Usuario, System.String Contra, System.Int32 IdTipoUsuario, System.Boolean Activo){
            Entities.ContactoUsuarios entity = new Entities.ContactoUsuarios();

            entity.Nombre = Nombre;
            entity.Apellido = Apellido;
            entity.Email = Email;
            entity.Telefono = Telefono;
            entity.Usuario = Usuario;
            entity.Contra = Contra;
            entity.IdTipoUsuario = IdTipoUsuario;
            entity.Activo = Activo;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuarios Login(System.String usuario, System.String contra) {
            
                return Instance().Login( usuario, contra);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuarios GetByUsuario(System.String usuario) {
            
                return Instance().GetByUsuario( usuario);
        }


        


    }
}





namespace crmRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ContactoUsuariosLoader<T> : BaseLoader< T, ContactoUsuarios, ObjectList<T>>, IGenericGateway where T : ContactoUsuarios, new()
    {

        #region "Singleton"

        static ContactoUsuariosLoader<T> _instance;

        private ContactoUsuariosLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ContactoUsuariosLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ContactoUsuariosLoader<T>();
                else {
                    ContactoUsuariosLoader<T> inst = HttpContext.Current.Items["crmRules.ContactoUsuariosLoaderSingleton"] as ContactoUsuariosLoader<T>;
                    if (inst == null) {
                        inst = new ContactoUsuariosLoader<T>();
                        HttpContext.Current.Items.Add("crmRules.ContactoUsuariosLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdUsuario"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ContactoUsuarios);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ContactoUsuarios"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ContactoUsuarios entity)
        {
            
            IMappeableContactoUsuariosObject ContactoUsuarios = (IMappeableContactoUsuariosObject)entity;
            ContactoUsuarios.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
reader.GetString(5),
reader.GetString(6),
reader.GetInt32(7),
reader.GetBoolean(8));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.ContactosTipoUsuario ContactosTipoUsuarioEntity = null; // Lazy load
            ((IMappeableContactoUsuarios)entity).CompleteEntity(ContactosTipoUsuarioEntity);
        }


        



        /// <summary>
        /// Get a ContactoUsuarios by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ContactoUsuariosList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdUsuario)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_GetOne", IdUsuario);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactosTipoUsuario(DbTransaction transaction, System.Int32 IdTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", IdTipoUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactosTipoUsuario(DbTransaction transaction, IUniqueIdentifiable ContactosTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", ContactosTipoUsuario.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactosTipoUsuario(System.Int32 IdTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", IdTipoUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByContactosTipoUsuario(IUniqueIdentifiable ContactosTipoUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_GetByContactosTipoUsuario", ContactosTipoUsuario.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public T Login(System.String usuario, System.String contra) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_Login" , usuario, contra);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public T Login(DbTransaction transaction , System.String usuario, System.String contra) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_Login" , usuario, contra);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public T GetByUsuario(System.String usuario) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ContactoUsuarios_GetByUsuario" , usuario);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public T GetByUsuario(DbTransaction transaction , System.String usuario) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ContactoUsuarios_GetByUsuario" , usuario);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





