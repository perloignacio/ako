
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 29/4/2022 - 06:52 p.Â m.
// This is a partial class file. The other one is ContactoUsuariosEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using crmRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace crmRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ContactoUsuarios : Objects.ContactoUsuariosObject, IMappeableContactoUsuarios, IEquatable<ContactoUsuarios>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuarios()
            :base()
        {
            if (_ContactosTipoUsuarioEntity == null) _ContactosTipoUsuarioEntity = new Entities.ContactosTipoUsuario();

        }

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuarios(
			System.Int32 IdUsuario)
            : base()
        {

			_IdUsuario = IdUsuario;

            if (_ContactosTipoUsuarioEntity == null) _ContactosTipoUsuarioEntity = new Entities.ContactosTipoUsuario();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuarios(
			System.Int32 IdUsuario,
			System.String Nombre,
			System.String Apellido,
			System.String Email,
			System.String Telefono,
			System.String Usuario,
			System.String Contra,
			System.Int32 IdTipoUsuario,
			System.Boolean Activo)
            : base()
        {

			_IdUsuario = IdUsuario;
			_Nombre = Nombre;
			_Apellido = Apellido;
			_Email = Email;
			_Telefono = Telefono;
			_Usuario = Usuario;
			_Contra = Contra;
			_IdTipoUsuario = IdTipoUsuario;
			_Activo = Activo;

            if (_ContactosTipoUsuarioEntity == null) _ContactosTipoUsuarioEntity = new Entities.ContactosTipoUsuario();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.ContactosTipoUsuario _ContactosTipoUsuarioEntity;

        #endregion

        #region "Properties"
        
bool _ContactosTipoUsuarioEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.ContactosTipoUsuario ContactosTipoUsuarioEntity
        {
            get
            {
                if (_ContactosTipoUsuarioEntity== null  && ! _ContactosTipoUsuarioEntityFetched ) {
_ContactosTipoUsuarioEntityFetched = true;
Entities.ContactosTipoUsuario _ContactosTipoUsuarioEntityTemp = new Entities.ContactosTipoUsuario(this.IdTipoUsuario); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.ContactosTipoUsuario));
 _ContactosTipoUsuarioEntity = lazyProvider.GetEntity(typeof(Entities.ContactosTipoUsuario), _ContactosTipoUsuarioEntityTemp) as Entities.ContactosTipoUsuario;
}

                return _ContactosTipoUsuarioEntity;
            }
            set
            {
                base.PropertyModified();
                _ContactosTipoUsuarioEntity = value;
                if (value != null) {
   _IdTipoUsuario = value.IdTipoUsuarioContacto;

} else {
   _IdTipoUsuario = System.Int32.MinValue;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new ContactoUsuarios OriginalValue()
        {
            return (ContactoUsuarios)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            ContactoUsuarios newObject;            
            

            newObject = (ContactoUsuarios)this.MemberwiseClone();
            // Entities
                         
            if (this._ContactosTipoUsuarioEntity != null)
            {
                newObject._ContactosTipoUsuarioEntity = (Entities.ContactosTipoUsuario)((ICloneable)this._ContactosTipoUsuarioEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            ContactoUsuarios newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (ContactoUsuarios)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._ContactosTipoUsuarioEntity != null)
                {
                    newOriginalValue._ContactosTipoUsuarioEntity = (Entities.ContactosTipoUsuario)((ICloneable)this.OriginalValue()._ContactosTipoUsuarioEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableContactoUsuarios.CompleteEntity(Entities.ContactosTipoUsuario ContactosTipoUsuarioEntity)
        {
        _ContactosTipoUsuarioEntity = ContactosTipoUsuarioEntity;
        }
        
        bool IMappeableContactoUsuarios.IsContactosTipoUsuarioEntityNull()
        {
            return (_ContactosTipoUsuarioEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableContactoUsuarios.SetFKValuesForChilds(ContactoUsuarios entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(ContactoUsuarios other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableContactoUsuarios
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.ContactosTipoUsuario ContactosTipoUsuarioEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsContactosTipoUsuarioEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(ContactoUsuarios entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class ContactoUsuariosList : ObjectList<ContactoUsuarios>
    {
    }
}
namespace crmRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class ContactoUsuariosListView
        : ObjectListView<Entities.ContactoUsuarios>
    {
        /// <summary>
        /// 
        /// </summary>
        public ContactoUsuariosListView(Entities.ContactoUsuariosList list): base(list)
        {
        }
    }
}


