
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 18/5/2022 - 11:33 a.Â m.
// This is a partial class file. The other one is ContactosEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using crmRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace crmRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class Contactos : Objects.ContactosObject, IMappeableContactos, IEquatable<Contactos>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public Contactos()
            :base()
        {
            
        }

        /// <summary>
        /// 
        /// </summary>
        public Contactos(
			System.Int32 IdContacto)
            : base()
        {

			_IdContacto = IdContacto;

            
            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public Contactos(
			System.Int32 IdContacto,
			System.String Nombre,
			System.String Apellido,
			System.String Email,
			System.String Telefono,
			System.Nullable<System.DateTime> FechaNacimiento,
			System.String Dni,
			System.String Cuit,
			System.String EstadoCivil,
			System.String Whatsapp,
			System.Boolean Activo,
			System.String Empresa,
			System.String Profesion,
			System.String Actividad,
			System.Nullable<System.DateTime> FechaRegistro,
			System.Nullable<System.Int32> IdOrigen,
			System.String Facebook,
			System.String Linkedin,
			System.String Instagram)
            : base()
        {

			_IdContacto = IdContacto;
			_Nombre = Nombre;
			_Apellido = Apellido;
			_Email = Email;
			_Telefono = Telefono;
			_FechaNacimiento = FechaNacimiento;
			_Dni = Dni;
			_Cuit = Cuit;
			_EstadoCivil = EstadoCivil;
			_Whatsapp = Whatsapp;
			_Activo = Activo;
			_Empresa = Empresa;
			_Profesion = Profesion;
			_Actividad = Actividad;
			_FechaRegistro = FechaRegistro;
			_IdOrigen = IdOrigen;
			_Facebook = Facebook;
			_Linkedin = Linkedin;
			_Instagram = Instagram;

            
            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.ContactosOrigen _ContactosOrigenEntity;

        #endregion

        #region "Properties"
        
bool _ContactosOrigenEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.ContactosOrigen ContactosOrigenEntity
        {
            get
            {
                if (_ContactosOrigenEntity== null  && this.IdOrigen.HasValue && ! _ContactosOrigenEntityFetched ) {
_ContactosOrigenEntityFetched = true;
Entities.ContactosOrigen _ContactosOrigenEntityTemp = new Entities.ContactosOrigen(this.IdOrigen.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.ContactosOrigen));
 _ContactosOrigenEntity = lazyProvider.GetEntity(typeof(Entities.ContactosOrigen), _ContactosOrigenEntityTemp) as Entities.ContactosOrigen;
}

                return _ContactosOrigenEntity;
            }
            set
            {
                base.PropertyModified();
                _ContactosOrigenEntity = value;
                if (value != null) {
   _IdOrigen = value.IdOrigen;

} else {
   _IdOrigen = null;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new Contactos OriginalValue()
        {
            return (Contactos)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            Contactos newObject;            
            

            newObject = (Contactos)this.MemberwiseClone();
            // Entities
                         
            if (this._ContactosOrigenEntity != null)
            {
                newObject._ContactosOrigenEntity = (Entities.ContactosOrigen)((ICloneable)this._ContactosOrigenEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            Contactos newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (Contactos)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._ContactosOrigenEntity != null)
                {
                    newOriginalValue._ContactosOrigenEntity = (Entities.ContactosOrigen)((ICloneable)this.OriginalValue()._ContactosOrigenEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableContactos.CompleteEntity(Entities.ContactosOrigen ContactosOrigenEntity)
        {
        _ContactosOrigenEntity = ContactosOrigenEntity;
        }
        
        bool IMappeableContactos.IsContactosOrigenEntityNull()
        {
            return (_ContactosOrigenEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableContactos.SetFKValuesForChilds(Contactos entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(Contactos other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableContactos
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.ContactosOrigen ContactosOrigenEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsContactosOrigenEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(Contactos entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class ContactosList : ObjectList<Contactos>
    {
    }
}
namespace crmRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class ContactosListView
        : ObjectListView<Entities.Contactos>
    {
        /// <summary>
        /// 
        /// </summary>
        public ContactosListView(Entities.ContactosList list): base(list)
        {
        }
    }
}


