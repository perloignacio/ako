
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 22/4/2022 - 03:14 p.Â m.
// This is a partial class file. The other one is ContactosDireccionesEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using crmRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace crmRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ContactosDirecciones : Objects.ContactosDireccionesObject, IMappeableContactosDirecciones, IEquatable<ContactosDirecciones>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public ContactosDirecciones()
            :base()
        {
            if (_ContactosEntity == null) _ContactosEntity = new Entities.Contactos();

        }

        /// <summary>
        /// 
        /// </summary>
        public ContactosDirecciones(
			System.Int32 IdContactoDireccion)
            : base()
        {

			_IdContactoDireccion = IdContactoDireccion;

            if (_ContactosEntity == null) _ContactosEntity = new Entities.Contactos();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public ContactosDirecciones(
			System.Int32 IdContactoDireccion,
			System.Int32 IdContacto,
			System.String Nombre,
			System.String Calle,
			System.String Nro,
			System.String Localidad,
			System.String Provincia,
			System.Boolean Activo,
			System.String Latitud,
			System.String Longitud,
			System.String Ubicacion)
            : base()
        {

			_IdContactoDireccion = IdContactoDireccion;
			_IdContacto = IdContacto;
			_Nombre = Nombre;
			_Calle = Calle;
			_Nro = Nro;
			_Localidad = Localidad;
			_Provincia = Provincia;
			_Activo = Activo;
			_Latitud = Latitud;
			_Longitud = Longitud;
			_Ubicacion = Ubicacion;

            if (_ContactosEntity == null) _ContactosEntity = new Entities.Contactos();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.Contactos _ContactosEntity;

        #endregion

        #region "Properties"
        
bool _ContactosEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Contactos ContactosEntity
        {
            get
            {
                if (_ContactosEntity== null  && ! _ContactosEntityFetched ) {
_ContactosEntityFetched = true;
Entities.Contactos _ContactosEntityTemp = new Entities.Contactos(this.IdContacto); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Contactos));
 _ContactosEntity = lazyProvider.GetEntity(typeof(Entities.Contactos), _ContactosEntityTemp) as Entities.Contactos;
}

                return _ContactosEntity;
            }
            set
            {
                base.PropertyModified();
                _ContactosEntity = value;
                if (value != null) {
   _IdContacto = value.IdContacto;

} else {
   _IdContacto = System.Int32.MinValue;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new ContactosDirecciones OriginalValue()
        {
            return (ContactosDirecciones)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            ContactosDirecciones newObject;            
            

            newObject = (ContactosDirecciones)this.MemberwiseClone();
            // Entities
                         
            if (this._ContactosEntity != null)
            {
                newObject._ContactosEntity = (Entities.Contactos)((ICloneable)this._ContactosEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            ContactosDirecciones newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (ContactosDirecciones)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._ContactosEntity != null)
                {
                    newOriginalValue._ContactosEntity = (Entities.Contactos)((ICloneable)this.OriginalValue()._ContactosEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableContactosDirecciones.CompleteEntity(Entities.Contactos ContactosEntity)
        {
        _ContactosEntity = ContactosEntity;
        }
        
        bool IMappeableContactosDirecciones.IsContactosEntityNull()
        {
            return (_ContactosEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableContactosDirecciones.SetFKValuesForChilds(ContactosDirecciones entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(ContactosDirecciones other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableContactosDirecciones
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.Contactos ContactosEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsContactosEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(ContactosDirecciones entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class ContactosDireccionesList : ObjectList<ContactosDirecciones>
    {
    }
}
namespace crmRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class ContactosDireccionesListView
        : ObjectListView<Entities.ContactosDirecciones>
    {
        /// <summary>
        /// 
        /// </summary>
        public ContactosDireccionesListView(Entities.ContactosDireccionesList list): base(list)
        {
        }
    }
}


